Java 8 : lambda Basics

Lambdas enable functional programming.
They eliminate boiler plate code and make code concise.
Enable support for parallel processing.

what problem does functional programming solve ?


we pass a behavior(class implementation of interface) to a method.
using lambdas we can pass actions(methods directly) to a method.

lambads are methods existing in isolation, not a method of particular class.

Data acts as a value to variables, you can assign it to primitive types.

Java 8:
inline value/ Function as a value,
 block of code can be a value and assigned to a variable. not the value of code after execution  but the block itself can be treated as a variable.
encapsulating a function in a variable that can be passed around.

you can pass an inline lambda expression too i.e. without using a variable name to hold the expression.


examples of lambda expressions:

greetingFunction = () -> System.out.println();

doubleTheNumber = (int a) -> a * 2;

addNumbers = (int a, int b) -> a + b;

safeDivide = (int a, int b) -> {
    if(b == 0)
        return 0;
    else
        a / b;
};

strLength = (String s) -> s.length();

When you are using an interface for lambda expression type, that interafce should have only one method.
i.e that interace should be a functional interface.

TypeInferenceExample
With Java 8 compiler can do Type inference:

RunnableExample:
You need an instance of Runnable to create a new thread.
Anonymous inner class to create an instance and call run() method.

Functional Interface:

In java 8 you can have interfaces having implementation methods.
Functional Interface are interfaces having one and only one abstract method.
This property can be enfored on interface usign @FunctionalInterface annotation.
For Lambda expression types we use Functional interfaces.

Standard Functional interfaces:
java.util.functions provides out the box functional interface which can be used for lambda expression type.







